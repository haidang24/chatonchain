import { arrayBufferToString, decodeBase64, encodeBase64, encodeText, keyStringToArrayBuffer, stringToArrayBuffer, SubtleCrypto, } from '../../utils';
export async function generateKeyPair() {
    return SubtleCrypto.generateKey({
        name: 'RSA-PSS',
        modulusLength: 4096,
        publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
        hash: 'SHA-512',
    }, true, ['sign', 'verify']);
}
export function importCryptoKey(pem) {
    const binaryDer = keyStringToArrayBuffer(pem);
    return SubtleCrypto.importKey('spki', binaryDer, {
        name: 'RSA-PSS',
        hash: 'SHA-512',
    }, true, ['verify']);
}
export function importCryptoPrivateKey(pem) {
    const binaryDer = keyStringToArrayBuffer(pem);
    return SubtleCrypto.importKey('pkcs8', binaryDer, {
        name: 'RSA-PSS',
        hash: 'SHA-512',
    }, true, ['sign']);
}
export async function sign(privateKey, data) {
    const signature = await SubtleCrypto.sign({
        name: 'RSA-PSS',
        saltLength: 64,
    }, privateKey, encodeText(data));
    const exportedAsString = arrayBufferToString(signature);
    const exportedAsBase64 = encodeBase64(exportedAsString);
    return exportedAsBase64;
}
export async function verifySignature(publicKey, signature, data) {
    const binaryDerString = decodeBase64(signature);
    const binaryDer = stringToArrayBuffer(binaryDerString);
    return await SubtleCrypto.verify({
        name: 'RSA-PSS',
        saltLength: 64,
    }, publicKey, binaryDer, encodeText(data));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3J5cHRvZ3JhcGh5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9zdHJhdGVnaWVzL2xvY2FsU3RvcmFnZS9jcnlwdG9ncmFwaHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLG1CQUFtQixFQUNuQixZQUFZLEVBQ1osWUFBWSxFQUNaLFVBQVUsRUFDVixzQkFBc0IsRUFDdEIsbUJBQW1CLEVBQ25CLFlBQVksR0FDYixNQUFNLGFBQWEsQ0FBQztBQUVyQixNQUFNLENBQUMsS0FBSyxVQUFVLGVBQWU7SUFDbkMsT0FBTyxZQUFZLENBQUMsV0FBVyxDQUM3QjtRQUNFLElBQUksRUFBRSxTQUFTO1FBQ2YsYUFBYSxFQUFFLElBQUk7UUFDbkIsY0FBYyxFQUFFLElBQUksVUFBVSxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNsRCxJQUFJLEVBQUUsU0FBUztLQUNoQixFQUNELElBQUksRUFDSixDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FDbkIsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLFVBQVUsZUFBZSxDQUFDLEdBQVc7SUFDekMsTUFBTSxTQUFTLEdBQUcsc0JBQXNCLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDOUMsT0FBTyxZQUFZLENBQUMsU0FBUyxDQUMzQixNQUFNLEVBQ04sU0FBUyxFQUNUO1FBQ0UsSUFBSSxFQUFFLFNBQVM7UUFDZixJQUFJLEVBQUUsU0FBUztLQUNoQixFQUNELElBQUksRUFDSixDQUFDLFFBQVEsQ0FBQyxDQUNYLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxVQUFVLHNCQUFzQixDQUFDLEdBQVc7SUFDaEQsTUFBTSxTQUFTLEdBQUcsc0JBQXNCLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDOUMsT0FBTyxZQUFZLENBQUMsU0FBUyxDQUMzQixPQUFPLEVBQ1AsU0FBUyxFQUNUO1FBQ0UsSUFBSSxFQUFFLFNBQVM7UUFDZixJQUFJLEVBQUUsU0FBUztLQUNoQixFQUNELElBQUksRUFDSixDQUFDLE1BQU0sQ0FBQyxDQUNULENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsVUFBcUIsRUFBRSxJQUFZO0lBQzVELE1BQU0sU0FBUyxHQUFHLE1BQU0sWUFBWSxDQUFDLElBQUksQ0FDdkM7UUFDRSxJQUFJLEVBQUUsU0FBUztRQUNmLFVBQVUsRUFBRSxFQUFFO0tBQ2YsRUFDRCxVQUFVLEVBQ1YsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUNqQixDQUFDO0lBQ0YsTUFBTSxnQkFBZ0IsR0FBRyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN4RCxNQUFNLGdCQUFnQixHQUFHLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3hELE9BQU8sZ0JBQWdCLENBQUM7QUFDMUIsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsZUFBZSxDQUNuQyxTQUFvQixFQUNwQixTQUFpQixFQUNqQixJQUFZO0lBRVosTUFBTSxlQUFlLEdBQUcsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ2hELE1BQU0sU0FBUyxHQUFHLG1CQUFtQixDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ3ZELE9BQU8sTUFBTSxZQUFZLENBQUMsTUFBTSxDQUM5QjtRQUNFLElBQUksRUFBRSxTQUFTO1FBQ2YsVUFBVSxFQUFFLEVBQUU7S0FDZixFQUNELFNBQVMsRUFDVCxTQUFTLEVBQ1QsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUNqQixDQUFDO0FBQ0osQ0FBQyJ9