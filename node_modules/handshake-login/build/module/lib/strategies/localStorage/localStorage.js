// https://github.com/namebasehq/handshake-id-manager/blob/master/src/services/DeviceService/index.ts
import { calculateFingerprint, encodeBase64, exportCryptoKey, exportPrivateCryptoKey, hash, } from '../../utils';
import { AbstractStrategy } from '../abstract';
import * as cryptography from './cryptography';
import * as store from './store';
/**
 * Local Storage Strategy
 */
export class LocalStorageStrategy extends AbstractStrategy {
    strategyName = 'LocalStorageStrategy';
    storageKey;
    reqData;
    resData;
    domain;
    deviceRecord;
    identity;
    strategyOptions;
    constructor() {
        super();
        this.storageKey = 'handshake:login:deviceId';
    }
    /**
     * Reset all properties
     */
    reset() {
        this.domain = null;
        this.identity = null;
        this.reqData = null;
        this.resData = null;
        this.deviceRecord = null;
    }
    /**
     * Set Request Data
     * @param reqData Request data to set
     */
    setRequestData(reqData) {
        this.reset();
        this.reqData = reqData;
        this.domain = reqData.domain.toLowerCase();
    }
    /**
     * Set Device Record
     * @param deviceRecord Device record to set
     */
    setDeviceRecord(deviceRecord) {
        this.deviceRecord = deviceRecord;
    }
    /**
     * Set Response Data
     * @param resData Response data to set
     */
    setResponseData(resData) {
        this.resData = resData;
        this.domain = resData.domain;
    }
    /**
     * Get Device ID
     * and generate if it doesn't exist
     * @returns device id
     */
    async getDeviceId() {
        return (window.localStorage.getItem(this.storageKey) ??
            this._generateNewDeviceId());
    }
    /**
     * Generate and store new Device ID
     * @returns new device id
     * @private
     */
    _generateNewDeviceId() {
        const uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            const r = (Math.random() * 16) | 0, v = c == 'x' ? r : (r & 0x3) | 0x8;
            return v.toString(16);
        });
        window.localStorage.setItem(this.storageKey, uuid);
        return uuid;
    }
    /**
     * Generate new Identity
     * @returns Identity
     */
    async generateIdentity() {
        if (!this.domain)
            throw new Error('Domain not set.');
        const { privateKey, publicKey } = await cryptography.generateKeyPair();
        const publicKeyString = await exportCryptoKey(publicKey);
        const identity = {
            name: this.domain,
            publicKey: publicKeyString,
            privateKey: await exportPrivateCryptoKey(privateKey),
            fingerprint: await hash(publicKeyString),
        };
        await store.saveIdentity(identity, this.strategyOptions?.password);
        this.identity = identity;
        return identity;
    }
    /**
     * Get an Identity
     * @returns Identity
     */
    async getIdentity() {
        if (!this.domain)
            throw new Error('Domain not set.');
        this.identity = await store.getIdentity(this.domain, this.strategyOptions?.password);
        return this.identity;
    }
    /**
     * Sign challenge
     * @returns signed data
     */
    async sign() {
        if (!this.domain)
            throw new Error('Domain not set.');
        if (!this.reqData?.challenge)
            throw new Error('Challenge not set.');
        if (!this.identity?.privateKey)
            throw new Error('Private Key not set.');
        let privateKey;
        try {
            privateKey = await cryptography.importCryptoPrivateKey(this.identity.privateKey);
        }
        catch (error) {
            console.error(error);
            throw new Error('Could not import invalid private key.');
        }
        const signature = await cryptography.sign(privateKey, this.reqData.challenge);
        return encodeBase64(signature);
    }
    /**
     * Verify signature
     * @param challenge challenge to verify signature with
     * @returns boolean if signature verified
     */
    async verify(challenge) {
        if (!challenge)
            throw new Error('Challenge not set.');
        if (!this.domain)
            throw new Error('Domain not set.');
        if (!this.resData?.publicKey)
            throw new Error('Public Key not set.');
        if (!this.resData?.signed)
            throw new Error('Signature not set.');
        let publicKey;
        try {
            publicKey = await cryptography.importCryptoKey(this.resData.publicKey);
        }
        catch (error) {
            console.error(error);
            throw new Error('Could not import invalid public key.');
        }
        const signatureVerified = await cryptography.verifySignature(publicKey, this.resData.signed, challenge);
        return signatureVerified;
    }
    /**
     * Generate DNS Record for Identity
     * @param prefix derived from domain and device id
     * @returns DNSRecord
     */
    async generateDnsRecord(prefix) {
        if (!prefix)
            throw new Error('Prefix not set.');
        if (!this.domain)
            throw new Error('Domain not set.');
        if (!this.identity?.fingerprint)
            throw new Error('Fingerprint not set.');
        return {
            type: 'TXT',
            name: `${prefix}._auth.${this.domain}.`,
            value: `v=0;fingerprint=${this.identity.fingerprint}`,
        };
    }
    /**
     * Generate Signature Data
     * @returns partial response data
     */
    async generateSignatureData() {
        return {
            signed: await this.sign(), // Buffer => b64 => b64 (https://github.com/namebasehq/handshake-id-manager/issues/6)
        };
    }
    /**
     * Get Fingerprint from Response Data's Public Key
     * @returns fingerprint
     */
    async getFingerprint() {
        if (!this.resData?.publicKey)
            throw new Error('Public Key not set.');
        let pubKey;
        try {
            pubKey = await cryptography.importCryptoKey(this.resData.publicKey);
        }
        catch (error) {
            console.error(error);
            throw new Error('Could not import invalid public key.');
        }
        return calculateFingerprint(pubKey);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWxTdG9yYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9zdHJhdGVnaWVzL2xvY2FsU3RvcmFnZS9sb2NhbFN0b3JhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEscUdBQXFHO0FBRXJHLE9BQU8sRUFDTCxvQkFBb0IsRUFDcEIsWUFBWSxFQUNaLGVBQWUsRUFDZixzQkFBc0IsRUFDdEIsSUFBSSxHQUNMLE1BQU0sYUFBYSxDQUFDO0FBQ3JCLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUvQyxPQUFPLEtBQUssWUFBWSxNQUFNLGdCQUFnQixDQUFDO0FBQy9DLE9BQU8sS0FBSyxLQUFLLE1BQU0sU0FBUyxDQUFDO0FBRWpDOztHQUVHO0FBQ0gsTUFBTSxPQUFPLG9CQUFxQixTQUFRLGdCQUFnQjtJQUMvQyxZQUFZLEdBQUcsc0JBQXNCLENBQUM7SUFDL0MsVUFBVSxDQUFTO0lBQ25CLE9BQU8sQ0FBYztJQUNyQixPQUFPLENBQWU7SUFDdEIsTUFBTSxDQUFTO0lBQ2YsWUFBWSxDQUFtQjtJQUMvQixRQUFRLENBQVc7SUFDbkIsZUFBZSxDQUEwQjtJQUV6QztRQUNFLEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxDQUFDLFVBQVUsR0FBRywwQkFBMEIsQ0FBQztJQUMvQyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLO1FBQ0gsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDbkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFDckIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7UUFDcEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7UUFDcEIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7SUFDM0IsQ0FBQztJQUVEOzs7T0FHRztJQUNILGNBQWMsQ0FBQyxPQUFvQjtRQUNqQyxJQUFJLENBQUMsS0FBSyxFQUFF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