import { expect } from 'chai';
import { decodeBase64 } from '../../utils';
import { LocalStorageStrategy } from './localStorage';
describe('Strategy - Local Storage', function () {
    const localStorageStrategy = new LocalStorageStrategy();
    before(function () {
        localStorageStrategy.setRequestData({
            domain: 'example',
            challenge: '7mhD9Lx_i_lEg98S7DYVC19bQswvpK_ywaVBng2uy0U',
            callbackUrl: 'https://localhost/callback',
        });
    });
    it('Creates and Gets Device ID', async function () {
        const deviceId = await localStorageStrategy.getDeviceId();
        expect(deviceId).to.be.a.string;
        const deviceIdAgain = await localStorageStrategy.getDeviceId();
        expect(deviceIdAgain).to.equal(deviceId);
    });
    it('Generates and saves an Identity', async function () {
        const identity = await localStorageStrategy.generateIdentity();
        expect(identity).to.have.all.keys([
            'name',
            'publicKey',
            'privateKey',
            'fingerprint',
        ]);
        const identityAgain = await localStorageStrategy.getIdentity();
        expect(identityAgain).to.deep.equal(identity);
        const identityAgain2 = await localStorageStrategy.getIdentity();
        expect(identityAgain2).to.deep.equal(identity);
    });
    it('Signs challenge and verifies signature', async function () {
        const signature = await localStorageStrategy.sign();
        expect(signature).to.be.a.string;
        // challenge needs to be specified as reqData will not be available on callback
        // (and should not be taken from resData)
        const challenge = localStorageStrategy.reqData.challenge;
        localStorageStrategy.setResponseData({
            domain: 'example',
            deviceId: 'prefix',
            publicKey: localStorageStrategy.identity.publicKey,
            signed: decodeBase64(signature),
        });
        const verified = await localStorageStrategy.verify(challenge);
        expect(verified).to.be.true;
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWxTdG9yYWdlLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL3N0cmF0ZWdpZXMvbG9jYWxTdG9yYWdlL2xvY2FsU3RvcmFnZS5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFOUIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUzQyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUV0RCxRQUFRLENBQUMsMEJBQTBCLEVBQUU7SUFDbkMsTUFBTSxvQkFBb0IsR0FBRyxJQUFJLG9CQUFvQixFQUFFLENBQUM7SUFFeEQsTUFBTSxDQUFDO1FBQ0wsb0JBQW9CLENBQUMsY0FBYyxDQUFDO1lBQ2xDLE1BQU0sRUFBRSxTQUFTO1lBQ2pCLFNBQVMsRUFBRSw2Q0FBNkM7WUFDeEQsV0FBVyxFQUFFLDRCQUE0QjtTQUMxQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyw0QkFBNEIsRUFBRSxLQUFLO1FBQ3BDLE1BQU0sUUFBUSxHQUFHLE1BQU0sb0JBQW9CLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDMUQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUVoQyxNQUFNLGFBQWEsR0FBRyxNQUFNLG9CQUFvQixDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQy9ELE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzNDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGlDQUFpQyxFQUFFLEtBQUs7UUFDekMsTUFBTSxRQUFRLEdBQUcsTUFBTSxvQkFBb0IsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQy9ELE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUM7WUFDaEMsTUFBTTtZQUNOLFdBQVc7WUFDWCxZQUFZO1lBQ1osYUFBYTtTQUNkLENBQUMsQ0FBQztRQUVILE1BQU0sYUFBYSxHQUFHLE1BQU0sb0JBQW9CLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDL0QsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRTlDLE1BQU0sY0FBYyxHQUFHLE1BQU0sb0JBQW9CLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDaEUsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2pELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHdDQUF3QyxFQUFFLEtBQUs7UUFDaEQsTUFBTSxTQUFTLEdBQUcsTUFBTSxvQkFBb0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNwRCxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO1FBRWpDLCtFQUErRTtRQUMvRSx5Q0FBeUM7UUFDekMsTUFBTSxTQUFTLEdBQUcsb0JBQW9CLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQztRQUV6RCxvQkFBb0IsQ0FBQyxlQUFlLENBQUM7WUFDbkMsTUFBTSxFQUFFLFNBQVM7WUFDakIsUUFBUSxFQUFFLFFBQVE7WUFDbEIsU0FBUyxFQUFFLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxTQUFTO1lBQ2xELE1BQU0sRUFBRSxZQUFZLENBQUMsU0FBUyxDQUFDO1NBQ2hDLENBQUMsQ0FBQztRQUVILE1BQU0sUUFBUSxHQUFHLE1BQU0sb0JBQW9CLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzlELE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQztJQUM5QixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIn0=