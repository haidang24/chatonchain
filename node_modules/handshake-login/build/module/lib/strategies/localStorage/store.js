import { arrayBufferToString, Crypto, decodeBase64, encodeBase64, hash, stringToArrayBuffer, SubtleCrypto, } from '../../utils';
const identityKeyPrefix = 'handshake:login:identity_';
const ivKeyPrefix = 'handshake:login:iv_';
export async function getIdentity(domain, password) {
    if (!domain)
        throw new Error('Domain not set.');
    const encryptedIdentity = window.localStorage.getItem(`${identityKeyPrefix}${encodeBase64(domain)}`);
    if (!encryptedIdentity)
        return null;
    const iv = stringToArrayBuffer(window.localStorage.getItem(`${ivKeyPrefix}${encodeBase64(domain)}`));
    try {
        const identity = await decrypt(stringToArrayBuffer(decodeBase64(encryptedIdentity)), await getPrivateKey(password), iv);
        return JSON.parse(arrayBufferToString(identity));
    }
    catch (error) {
        throw new Error('Invalid password.');
    }
}
export async function saveIdentity(identity, password) {
    if (!identity)
        throw new Error('Identity not set.');
    const iv = Crypto.getRandomValues(new Uint8Array(12));
    window.localStorage.setItem(`${ivKeyPrefix}${encodeBase64(identity.name)}`, arrayBufferToString(iv));
    const encryptedIdentity = await encrypt(stringToArrayBuffer(JSON.stringify(identity)), await getPrivateKey(password), iv);
    window.localStorage.setItem(`${identityKeyPrefix}${encodeBase64(identity.name)}`, encodeBase64(arrayBufferToString(encryptedIdentity)));
}
async function getPrivateKey(password) {
    const k = (await hash(await hash(password))).slice(0, 22);
    const privateKey = await SubtleCrypto.importKey('jwk', {
        key_ops: ['encrypt', 'decrypt'],
        ext: true,
        kty: 'oct',
        k: k,
        alg: 'A128GCM',
    }, {
        name: 'AES-GCM',
    }, false, ['encrypt', 'decrypt']);
    return privateKey;
}
async function encrypt(data, privateKey, iv) {
    if (!data)
        throw new Error('Data to encrypt not set.');
    if (!privateKey)
        throw new Error('Private Key not set.');
    if (!iv)
        throw new Error('IV not set.');
    const encryptedData = await SubtleCrypto.encrypt({
        name: 'AES-GCM',
        iv: iv,
    }, privateKey, data);
    return encryptedData;
}
async function decrypt(data, privateKey, iv) {
    if (!data)
        throw new Error('Data to decrypt not set.');
    if (!privateKey)
        throw new Error('Private Key not set.');
    if (!iv)
        throw new Error('IV not set.');
    const decryptedData = await SubtleCrypto.decrypt({
        name: 'AES-GCM',
        iv: iv,
    }, privateKey, data);
    return decryptedData;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL3N0cmF0ZWdpZXMvbG9jYWxTdG9yYWdlL3N0b3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxtQkFBbUIsRUFDbkIsTUFBTSxFQUNOLFlBQVksRUFDWixZQUFZLEVBQ1osSUFBSSxFQUNKLG1CQUFtQixFQUNuQixZQUFZLEdBQ2IsTUFBTSxhQUFhLENBQUM7QUFFckIsTUFBTSxpQkFBaUIsR0FBRywyQkFBMkIsQ0FBQztBQUN0RCxNQUFNLFdBQVcsR0FBRyxxQkFBcUIsQ0FBQztBQUUxQyxNQUFNLENBQUMsS0FBSyxVQUFVLFdBQVcsQ0FDL0IsTUFBYyxFQUNkLFFBQWlCO0lBRWpCLElBQUksQ0FBQyxNQUFNO1FBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBRWhELE1BQU0saUJBQWlCLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQ25ELEdBQUcsaUJBQWlCLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQzlDLENBQUM7SUFDRixJQUFJLENBQUMsaUJBQWlCO1FBQUUsT0FBTyxJQUFJLENBQUM7SUFFcEMsTUFBTSxFQUFFLEdBQUcsbUJBQW1CLENBQzVCLE1BQU0sQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsV0FBVyxHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQ3JFLENBQUM7SUFDRixJQUFJO1FBQ0YsTUFBTSxRQUFRLEdBQUcsTUFBTSxPQUFPLENBQzVCLG1CQUFtQixDQUFDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLEVBQ3BELE1BQU0sYUFBYSxDQUFDLFFBQVEsQ0FBQyxFQUM3QixFQUFFLENBQ0gsQ0FBQztRQUNGLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0tB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