import doh from 'dohjs';
import { AbstractStrategy } from './strategies/abstract';
export declare class HandshakeLogin {
    strategy: AbstractStrategy;
    useDoh: boolean;
    resolver: any;
    dohResolver: doh.DohResolver;
    domain: string;
    idManager: string;
    deviceId: string;
    prefix: string;
    reqData: RequestData;
    resData: ResponseData;
    identity: Identity;
    constructor({ useDoh, strategy, dohResolverUrl, dnsResolvers, }?: {
        useDoh?: boolean;
        strategy?: import("./strategies/localStorage/localStorage").LocalStorageStrategy;
        dohResolverUrl?: string;
        dnsResolvers?: string[];
    });
    /**
     * Make DNS Queries
     * @param domain Domain name
     * @param type DNS record type
     * @returns DNS Response Answers array (or null)
     */
    makeDnsQuery(domain: string, type: string): Promise<DNSRecord[]>;
    /**
     * Get ID Manager
     * @param domain Domain name
     * @returns url or null
     */
    getIdManager(): Promise<string>;
    /**
     * Generate Request URL
     * @returns Request URL
     */
    generateRequestUrl({ domain, challenge, callbackUrl, }: {
        domain: any;
        challenge: any;
        callbackUrl: any;
    }): Promise<string>;
    /**
     * Set Request Data
     * @param reqData Request data to set
     */
    setRequestData(reqData: RequestData): void;
    /**
     * Parse Request Data from URL
     * Uses window.location if url is not passed.
     * @param url url with request data to be parsed
     * @returns request data object
     */
    parseRequestDataFromUrl(url?: string): RequestData;
    /**
     * Get Device Record
     * @returns Device Record Data
     */
    getDeviceRecord(): Promise<DeviceRecordData>;
    /**
     * Generate DNS Record
     * @returns DNS Record
     */
    generateDnsRecord(): Promise<DNSRecord>;
    /**
     * Verify Fingerprint with DNS
     * @param fingerprint Expected fingerprint
     * @returns boolean if fingerprint is found
     */
    verifyFingerprintWithDNS(fingerprint?: string): Promise<boolean>;
    /**
     * Use Strategy
     * @param strategy strategy to use
     */
    useStrategy(strategy: AbstractStrategy): Promise<void>;
    /**
     * Get Device ID
     * also calculates prefix
     * @returns device id
     */
    getDeviceId(): Promise<string>;
    /**
     * Generate Identity
     * @returns Identity
     */
    generateIdentity(): Promise<Identity>;
    /**
     * Get existing Identity
     * @returns Identity
     */
    getIdentity(): Promise<Identity>;
    /**
     * Get Prefix
     * based on domain and device id
     * @returns prefix
     */
    getPrefix(): Promise<string>;
    /**
     * Sign Challenge
     * @returns signature
     */
    sign(): Promise<string>;
    /**
     * Verify Signature
     * @param challenge
     * @returns boolean whether valid signaure
     */
    verify(challenge: string): Promise<boolean>;
    /**
     * Generate Response Data
     * @returns Response Data
     */
    generateResponseData(): Promise<ResponseData>;
    /**
     * Generate Response URL
     * @returns response url
     */
    generateResponseUrl(): Promise<string>;
    /**
     * Set Response Data
     * @param resData Response Data
     */
    setResponseData(resData: ResponseData): void;
    /**
     * Parse Response Data From URL
     * @param url response url
     * @returns Response Data
     */
    parseResponseDataFromUrl(url?: any): ResponseData;
    /**
     * Verify Response Data
     * Checks signature of challenge and fingerprint with DNS.
     * @param challenge challenge to verify
     * @returns boolean whether valid response
     */
    verifyResponseData(challenge: string): Promise<boolean>;
}
export declare const Strategies: {
    LocalStorageStrategy: {
        name: string;
        strategy: typeof import("./strategies/localStorage/localStorage").LocalStorageStrategy;
    };
    WebAuthnStrategy: {
        name: string;
        strategy: typeof import("./strategies/webAuthn/webAuthn").WebAuthnStrategy;
    };
};
