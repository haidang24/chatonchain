"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.keyStringToArrayBuffer = exports.exportPrivateCryptoKey = exports.calculateFingerprint = exports.exportCryptoKey = exports.encodeText = exports.arrayBufferToString = exports.stringToArrayBuffer = exports.hash = exports.concatTypedArrays = exports.parseTxtRecordData = exports.decodeBase64 = exports.encodeBase64 = exports.SubtleCrypto = exports.Crypto = void 0;
if (typeof window !== 'undefined' && window.crypto) {
    exports.Crypto = window.crypto;
    exports.SubtleCrypto = exports.Crypto.subtle;
}
else {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    exports.Crypto = require('crypto').webcrypto;
    exports.SubtleCrypto = exports.Crypto.subtle;
}
// https://stackoverflow.com/a/62667703/1724828
/**
 * Encode a string of text as base64
 *
 * @param data The string of text.
 * @returns The base64 encoded string.
 */
function encodeBase64(data) {
    if (typeof btoa === 'function') {
        return btoa(data);
    }
    else if (typeof Buffer === 'function') {
        return Buffer.from(data, 'utf-8').toString('base64');
    }
    else {
        throw new Error('Failed to determine the platform specific encoder');
    }
}
exports.encodeBase64 = encodeBase64;
/**
 * Decode a string of base64 as text
 *
 * @param data The string of base64 encoded text
 * @returns The decoded text.
 */
function decodeBase64(data) {
    if (typeof atob === 'function') {
        return atob(data);
    }
    else if (typeof Buffer === 'function') {
        return Buffer.from(data, 'base64').toString('utf-8');
    }
    else {
        throw new Error('Failed to determine the platform specific decoder');
    }
}
exports.decodeBase64 = decodeBase64;
function parseTxtRecordData(str) {
    if (str.startsWith('"'))
        str = str.slice(1);
    if (str.endsWith('"'))
        str = str.slice(0, -1);
    const txtDataObj = str.split(';').reduce((data, part) => {
        const tmp = part.split('=');
        return Object.assign(Object.assign({}, data), { [tmp[0]]: tmp[1] });
    }, {});
    return txtDataObj;
}
exports.parseTxtRecordData = parseTxtRecordData;
function concatTypedArrays(arrays) {
    let length = 0;
    arrays.forEach((item) => {
        length += item.length;
    });
    // Create a new array with total length and merge all source arrays.
    const mergedArray = new Uint8Array(length);
    let offset = 0;
    arrays.forEach((item) => {
        mergedArray.set(item, offset);
        offset += item.length;
    });
    // Should print an array with length 90788 (5x 16384 + 8868 your source arrays)
    return mergedArray;
}
exports.concatTypedArrays = concatTypedArrays;
async function hash(text) {
    const textEncoder = new TextEncoder();
    const fingerprint = await exports.SubtleCrypto.digest('SHA-256', textEncoder.encode(text));
    const hashArray = Array.from(new Uint8Array(fingerprint));
    const hashHex = hashArray
        .map((b) => b.toString(16).padStart(2, '0'))
        .join(''); // convert bytes to hex string
    return hashHex;
}
exports.hash = hash;
function stringToArrayBuffer(str) {
    const buf = new ArrayBuffer(str.length);
    const bufView = new Uint8Array(buf);
    for (let i = 0, strLen = str.length; i < strLen; i++) {
        bufView[i] = str.charCodeAt(i);
    }
    return buf;
}
exports.stringToArrayBuffer = stringToArrayBuffer;
function arrayBufferToString(buf) {
    return String.fromCharCode.apply(null, Array.from(new Uint8Array(buf)));
}
exports.arrayBufferToString = arrayBufferToString;
const textEncoder = new TextEncoder();
function encodeText(str) {
    return textEncoder.encode(str);
}
exports.encodeText = encodeText;
async function exportCryptoKey(key) {
    const exported = await exports.SubtleCrypto.exportKey('spki', key);
    const exportedAsString = arrayBufferToString(exported);
    const exportedAsBase64 = encodeBase64(exportedAsString);
    return `-----BEGIN PUBLIC KEY-----\n${exportedAsBase64}\n-----END PUBLIC KEY-----`;
}
exports.exportCryptoKey = exportCryptoKey;
async function calculateFingerprint(key) {
    const exportedKey = await exportCryptoKey(key);
    const fingerprint = await exports.SubtleCrypto.digest('SHA-256', encodeText(exportedKey));
    const hashArray = Array.from(new Uint8Array(fingerprint));
    const hashHex = hashArray
        .map((b) => b.toString(16).padStart(2, '0'))
        .join(''); // convert bytes to hex string
    return hashHex;
}
exports.calculateFingerprint = calculateFingerprint;
async function exportPrivateCryptoKey(key) {
    const exported = await exports.SubtleCrypto.exportKey('pkcs8', key);
    const exportedAsString = arrayBufferToString(exported);
    const exportedAsBase64 = encodeBase64(exportedAsString);
    return `-----BEGIN PRIVATE KEY-----\n${exportedAsBase64}\n-----END PRIVATE KEY-----`;
}
exports.exportPrivateCryptoKey = exportPrivateCryptoKey;
function keyStringToArrayBuffer(pem) {
    const cleanKey = pem
        .replace(/\n?-{5}\n?[\w\s]+\n?-{5}\n?/g, '')
        .replace(/=+$/g, '');
    // base64 decode the string to get the binary data
    const binaryDerString = decodeBase64(cleanKey);
    // convert from a binary string to an ArrayBuffer
    return stringToArrayBuffer(binaryDerString);
}
exports.keyStringToArrayBuffer = keyStringToArrayBuffer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUdBLElBQUksT0FBTyxNQUFNLEtBQUssV0FBVyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUU7SUFDbEQsY0FBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDdkIsb0JBQVksR0FBRyxjQUFNLENBQUMsTUFBTSxDQUFDO0NBQzlCO0tBQU07SUFDTCw4REFBOEQ7SUFDOUQsY0FBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDckMsb0JBQVksR0FBRyxjQUFNLENBQUMsTUFBTSxDQUFDO0NBQzlCO0FBRUQsK0NBQStDO0FBQy9DOzs7OztHQUtHO0FBQ0gsU0FBZ0IsWUFBWSxDQUFDLElBQVk7SUFDdkMsSUFBSSxPQUFPLElBQUksS0FBSyxVQUFVLEVBQUU7UUFDOUIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDbkI7U0FBTSxJQUFJLE9BQU8sTUFBTSxLQUFLLFVBQVUsRUFBRTtRQUN2QyxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUN0RDtTQUFNO1FBQ0wsTUFBTSxJQUFJLEtBQUssQ0FBQyxtREFBbUQsQ0FBQyxDQUFDO0tBQ3RFO0FBQ0gsQ0FBQztBQVJELG9DQVFDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxTQUFnQixZQUFZLENBQUMsSUFBWTtJQUN2QyxJQUFJLE9BQU8sSUFBSSxLQUFLLFVBQVUsRUFBRTtRQUM5QixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUNuQjtTQUFNLElBQUksT0FBTyxNQUFNLEtBQUssVUFBVSxFQUFFO1FBQ3ZDLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUMsUUFBUSxD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