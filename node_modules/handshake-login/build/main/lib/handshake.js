"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Strategies = exports.HandshakeLogin = void 0;
const promises_1 = require("dns/promises");
const dohjs_1 = __importDefault(require("dohjs"));
const strategies_1 = __importDefault(require("./strategies"));
const utils_1 = require("./utils");
const DEFAULT_STRATEGY_NAME = 'LocalStorageStrategy';
const DEFAULT_DOH_RESOLVER = 'https://query.hdns.io/dns-query';
const DEFAULT_DNS_RESOLVERS = [
    '103.196.38.38',
    '103.196.38.39',
    '103.196.38.40',
];
class HandshakeLogin {
    constructor({ useDoh = false, strategy = new strategies_1.default[DEFAULT_STRATEGY_NAME].strategy(), dohResolverUrl = DEFAULT_DOH_RESOLVER, dnsResolvers = DEFAULT_DNS_RESOLVERS, } = {}) {
        this.useDoh = useDoh;
        this.strategy = strategy;
        if (useDoh) {
            this.dohResolver = new dohjs_1.default.DohResolver(dohResolverUrl);
        }
        else {
            this.resolver = new promises_1.Resolver();
            const servers = dnsResolvers !== null && dnsResolvers !== void 0 ? dnsResolvers : DEFAULT_DNS_RESOLVERS;
            this.resolver.setServers(servers);
        }
    }
    /**
     * Make DNS Queries
     * @param domain Domain name
     * @param type DNS record type
     * @returns DNS Response Answers array (or null)
     */
    async makeDnsQuery(domain, type) {
        if (!domain)
            throw new Error('Domain not set.');
        if (this.useDoh) {
            const dnsResponse = await this.dohResolver.query(domain, type, 'GET');
            if (!dnsResponse.answers.length)
                return null;
            return dnsResponse.answers.map((ans) => {
                return {
                    name: ans.name,
                    type: ans.type,
                    value: String.fromCharCode.apply(null, utils_1.concatTypedArrays(ans.data)),
                };
            });
        }
        else {
            try {
                const answers = await this.resolver.resolve(domain, type);
                return answers.map((ans) => {
                    return { name: domain, type: type, value: ans.join() };
                });
            }
            catch (error) {
                return null;
            }
        }
    }
    /**
     * Get ID Manager
     * @param domain Domain name
     * @returns url or null
     */
    async getIdManager() {
        const dnsResponse = await this.makeDnsQuery(`_idmanager.${this.domain}`, 'TXT');
        if (!(dnsResponse === null || dnsResponse === void 0 ? void 0 : dnsResponse.length))
            return 'https://id.namebase.io';
        const idManagerRecord = utils_1.parseTxtRecordData(dnsResponse[0].value);
        this.idManager = idManagerRecord.url;
        return this.idManager;
    }
    /**
     * Generate Request URL
     * @returns Request URL
     */
    async generateRequestUrl({ domain, challenge, callbackUrl, }) {
        if (!domain)
            throw new Error('Domain not set.');
        if (!challenge)
            throw new Error('Challenge not set.');
        if (!callbackUrl)
            throw new Error('Callback URL not set.');
        this.domain = domain.toLowerCase();
        const idMgrUrl = await this.getIdManager();
        return `${idMgrUrl}/#/login?state=${utils_1.encodeBase64(challenge)}&id=${utils_1.encodeBase64(this.domain)}&callbackUrl=${utils_1.encodeBase64(callbackUrl)}`;
    }
    /**
     * Set Request Data
     * @param reqData Request data to set
     */
    setRequestData(reqData) {
        if (!reqData)
            throw new Error('Request Data not set.');
        this.reqData = reqData;
        this.domain = reqData.domain.toLowerCase();
        this.strategy.setRequestData(this.reqData);
    }
    /**
     * Parse Request Data from URL
     * Uses window.location if url is not passed.
     * @param url url with request data to be parsed
     * @returns request data object
     */
    parseRequestDataFromUrl(url = null) {
        if (!url) {
            url = window.location.href;
        }
        const hash = new URL(url).hash;
        const queryIndex = hash.indexOf('?');
        const regex = /([^&=]+)=([^&]*)/g;
        const queryString = hash.substr(queryIndex + 1);
        const params = queryString
            .match(regex)
            .reduce((data, part) => {
            const idx = part.indexOf('=');
            return Object.assign(Object.assign({}, data), { [part.slice(0, idx)]: utils_1.decodeBase64(part.slice(idx + 1, part.length)) });
        }, {});
        this.setRequestData({
            domain: params.id,
            challenge: params.state,
            callbackUrl: params.callbackUrl,
        });
        return this.reqData;
    }
    /**
     * Get Device Record
     * @returns Device Record Data
     */
    async getDeviceRecord() {
        if (!this.domain)
            throw new Error('Domain not set.');
        if (!this.prefix)
            throw new Error('Prefix not set.');
        const dnsResponse = await this.makeDnsQuery(`${this.prefix}._auth.${this.domain}`, 'TXT');
        if (!(dnsResponse === null || dnsResponse === void 0 ? void 0 : dnsResponse.length))
            return null;
        const deviceRecord = utils_1.parseTxtRecordData(dnsResponse[0].value);
        this.strategy.setDeviceRecord(deviceRecord);
        return deviceRecord;
    }
    /**
     * Generate DNS Record
     * @returns DNS Record
     */
    async generateDnsRecord() {
        return this.strategy.generateDnsRecord(this.prefix);
    }
    /**
     * Verify Fingerprint with DNS
     * @param fingerprint Expected fingerprint
     * @returns boolean if fingerprint is found
     */
    async verifyFingerprintWithDNS(fingerprint = null) {
        if (!this.domain)
            throw new Error('Domain not set.');
        if (!this.prefix)
            throw new Error('Prefix not set.');
        const fingerprintToCompare = fingerprint !== null && fingerprint !== void 0 ? fingerprint : this.identity.fingerprint;
        const txtData = await this.getDeviceRecord();
        if (!txtData)
            return false;
        return txtData.fingerprint === fingerprintToCompare;
    }
    /**
     * Use Strategy
     * @param strategy strategy to use
     */
    async useStrategy(strategy) {
        if (!strategy)
            throw new Error('Strategy not set.');
        this.strategy = strategy;
        if (this.reqData)
            this.strategy.setRequestData(this.reqData);
        if (this.resData)
            this.strategy.setResponseData(this.resData);
    }
    /**
     * Get Device ID
     * also calculates prefix
     * @returns device id
     */
    async getDeviceId() {
        this.deviceId = await this.strategy.getDeviceId();
        await this.getPrefix();
        return this.deviceId;
    }
    /**
     * Generate Identity
     * @returns Identity
     */
    async generateIdentity() {
        this.identity = await this.strategy.generateIdentity();
        return this.identity;
    }
    /**
     * Get existing Identity
     * @returns Identity
     */
    async getIdentity() {
        this.identity = await this.strategy.getIdentity();
        return this.identity;
    }
    /**
     * Get Prefix
     * based on domain and device id
     * @returns prefix
     */
    async getPrefix() {
        if (!this.domain)
            throw new Error('Domain not set.');
        if (!this.deviceId)
            throw new Error('Device ID not set.');
        this.prefix = (await utils_1.hash(this.domain + this.deviceId)).slice(0, 16);
        return this.prefix;
    }
    /**
     * Sign Challenge
     * @returns signature
     */
    async sign() {
        return this.strategy.sign();
    }
    /**
     * Verify Signature
     * @param challenge
     * @returns boolean whether valid signaure
     */
    async verify(challenge) {
        return this.strategy.verify(challenge);
    }
    /**
     * Generate Response Data
     * @returns Response Data
     */
    async generateResponseData() {
        var _a;
        if (!this.domain)
            throw new Error('Domain not set.');
        if (!this.prefix)
            throw new Error('Prefix not set.');
        if (!((_a = this.identity) === null || _a === void 0 ? void 0 : _a.publicKey))
            throw new Error('Public Key not set.');
        if (!this.strategy)
            throw new Error('Strategy not set.');
        const data = Object.assign({ domain: utils_1.encodeBase64(this.domain), deviceId: utils_1.encodeBase64(this.prefix), publicKey: utils_1.encodeBase64(this.identity.publicKey), strategy: utils_1.encodeBase64(this.strategy.strategyName) }, (await this.strategy.generateSignatureData()));
        return data;
    }
    /**
     * Generate Response URL
     * @returns response url
     */
    async generateResponseUrl() {
        var _a;
        if (!((_a = this.reqData) === null || _a === void 0 ? void 0 : _a.callbackUrl))
            throw new Error('Callback URL not set.');
        const data = await this.generateResponseData();
        const url = new URL(this.reqData.callbackUrl);
        url.hash = utils_1.encodeBase64(JSON.stringify(data)); // JSON => str => b64
        return url.toString();
    }
    /**
     * Set Response Data
     * @param resData Response Data
     */
    setResponseData(resData) {
        var _a;
        if (!resData)
            throw new Error('Response Data not set.');
        this.resData = resData;
        this.domain = resData.domain.toLowerCase();
        this.prefix = (_a = resData.prefix) !== null && _a !== void 0 ? _a : resData.deviceId;
        this.strategy.setResponseData(this.resData);
    }
    /**
     * Parse Response Data From URL
     * @param url response url
     * @returns Response Data
     */
    parseResponseDataFromUrl(url = null) {
        const hash = new URL(url).hash;
        const b64encoded = hash.slice(1);
        const data = JSON.parse(utils_1.decodeBase64(b64encoded));
        Object.keys(data).map(function (key) {
            data[key] = utils_1.decodeBase64(data[key]);
        });
        data.prefix = data.deviceId;
        delete data.deviceId;
        this.setResponseData(data);
        return data;
    }
    /**
     * Verify Response Data
     * Checks signature of challenge and fingerprint with DNS.
     * @param challenge challenge to verify
     * @returns boolean whether valid response
     */
    async verifyResponseData(challenge) {
        var _a, _b;
        if (!challenge)
            throw new Error('Challenge not set.');
        const strategy = (_b = strategies_1.default[(_a = this.resData.strategy) !== null && _a !== void 0 ? _a : DEFAULT_STRATEGY_NAME]) !== null && _b !== void 0 ? _b : null;
        if (!strategy)
            throw new Error('Strategy not found. You may need to update the library.');
        this.useStrategy(new strategy.strategy());
        const fingerprint = await this.strategy.getFingerprint();
        const fpMatched = await this.verifyFingerprintWithDNS(fingerprint);
        if (!fpMatched)
            return false;
        return this.strategy.verify(challenge);
    }
}
exports.HandshakeLogin = HandshakeLogin;
exports.Strategies = strategies_1.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFuZHNoYWtlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9oYW5kc2hha2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsMkNBQXdDO0FBRXhDLGtEQUF3QjtBQUV4Qiw4REFBc0M7QUFFdEMsbUNBTWlCO0FBRWpCLE1BQU0scUJBQXFCLEdBQUcsc0JBQXNCLENBQUM7QUFDckQsTUFBTSxvQkFBb0IsR0FBRyxpQ0FBaUMsQ0FBQztBQUMvRCxNQUFNLHFCQUFxQixHQUFHO0lBQzVCLGVBQWU7SUFDZixlQUFlO0lBQ2YsZUFBZTtDQUNoQixDQUFDO0FBRUYsTUFBYSxjQUFjO0lBY3pCLFlBQVksRUFDVixNQUFNLEdBQUcsS0FBSyxFQUNkLFFBQVEsR0FBRyxJQUFJLG9CQUFVLENBQUMscUJBQXFCLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFDM0QsY0FBYyxHQUFHLG9CQUFvQixFQUNyQyxZQUFZLEdBQUcscUJBQXFCLEdBQ3JDLEdBQUcsRUFBRTtRQUNKLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBRXpCLElBQUksTUFBTSxFQUFFO1lBQ1YsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLGVBQUcsQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLENBQUM7U0FDeEQ7YUFBTTtZQUNMLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxtQkFBUSxFQUFFLENBQUM7WUFDL0IsTUFBTSxPQUFPLEdBQUcsWUFBWSxhQUFaLFlBQVksY0FBWixZQUFZLEdBQUkscUJBQXFCLENBQUM7WUFDdEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDbkM7SUFDSCxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxLQUFLLENBQUMsWUFBWSxDQUFDLE1BQWMsRUFBRSxJQUFZO1FBQzdDLElBQUksQ0FBQyxNQUFNO1lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBRWhELElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNmLE1BQU0sV0FBVyxHQUFHLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztZQUN0RSxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxNQUFNO2dCQUFFLE9BQU8sSUFBSSxDQUFDO1lBQzdDLE9BQU8sV0FBVyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtnQkFDckMsT0FBTztvQkFDTCxJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUk7b0JBQ2QsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJO29CQUNkLEtBQUssRUFBRSxNQUFNLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUseUJBQWlCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUNwRSxDQUFDO1lBQ0osQ0FBQyxDQUFDLENBQUM7U0FDSjthQUFNO1lBQ0wsSUFBSTtnQkFDRixNQUFNLE9BQU8sR0FBRyxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztnQkFDMUQsT0FBUSxPQUFzQixDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO29CQUN6QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQztnQkFDekQsQ0FBQyxDQUFDLENBQUM7YUFDSjtZQUFDLE9BQU8sS0FBSyxFQUFFO2dCQUNkLE9BQU8sSUFBSSxDQUFDO2FBQ2I7U0FDRjtJQUNILENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsS0FBSyxDQUFDLFlBQVk7UUFDaEIsTUFBTSxXQUFXLEdBQUcsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUN6QyxjQUFjLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFDM0IsS0FBSyxDQUNOLENBQUM7UUFDRixJQUFJLENBQUMsQ0FBQSxXQUFXLGFBQVgsV0FBVyx1QkFBWCxXQUFXLENBQUUsTUFBTSxDQUFBO1lBQUUsT0FBTyx3QkFBd0IsQ0FBQztRQUUxRCxNQUFNLGVBQWUsR0FBd0IsMEJBQWtCLENBQzdELFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQ3JCLENBQUM7UUFDRixJQUFJLENBQUMsU0FBUyxHQUFHLGVBQWUsQ0FBQyxHQUFHLENBQUM7UUFDckMsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQ3hCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxLQUFLLENBQUMsa0JBQWtCLENBQUMsRUFDdkIsTUFBTSxFQUNOLFNBQVMsRUFDVCxXQUFXLEdBQ1o7UUFDQyxJQUFJLENBQUMsTUFBTTtZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUNoRCxJQUFJLENBQUMsU0FBUztZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUN0RCxJQUFJLENBQUMsV0FBVztZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQztRQUUzRCxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNuQyxNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUMzQyxPQUFPLEdBQUcsUUFBUSxrQkFBa0Isb0JBQVksQ0FDOUMsU0FBUyxDQUNWLE9BQU8sb0JBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixvQkFBWSxDQUMzRCxXQUFXLENBQ1osRUFBRSxDQUFDO0lBQ04sQ0FBQztJQUVEOzs7T0FHRztJQUNILGNBQWMsQ0FBQyxPQUFvQjtRQUNqQyxJQUFJLENBQUMsT0FBTztZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQztRQUV2RCxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUN2QixJQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDM0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILHVCQUF1QixDQUFDLE1BQWMsSUFBSTtRQUN4QyxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ1IsR0FBRyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO1NBQzVCO1FBQ0QsTUFBTSxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQy9CLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDckMsTUFBTSxLQUFLLEdBQUcsbUJBQW1CLENBQUM7UUFDbEMsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDaEQsTUFBTSxNQUFNLEdBQTJCLFdBQVc7YUFDL0MsS0FBSyxDQUFDLEtBQUssQ0FBQzthQUNaLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRTtZQUNyQixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzlCLHVDQUNLLElBQUksS0FDUCxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsb0JBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQ3BFO1FBQ0osQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRVQsSUFBSSxDQUFDLGNBQWMsQ0FBQztZQUNsQixNQUFNLEVBQUUsTUFBTSxDQUFDLEVBQUU7WUFDakIsU0FBUyxFQUFFLE1BQU0sQ0FBQyxLQUFLO1lBQ3ZCLFdBQVcsRUFBRSxNQUFNLENBQUMsV0FBVztTQUNoQyxDQUFDLENBQUM7UUFDSCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxlQUFlO1FBQ25CLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTTtZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU07WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFFckQsTUFBTSxXQUFXLEdBQUcsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUN6QyxHQUFHLElBQUksQ0FBQyxNQUFNLFVBQVUsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUNyQyxLQUFLLENBQ04sQ0FBQztRQUNGLElBQUksQ0FBQyxDQUFBLFdBQVcsYUFBWCxXQUFXLHVCQUFYLFdBQVcsQ0FBRSxNQUFNLENBQUE7WUFBRSxPQUFPLElBQUksQ0FBQztRQUV0QyxNQUFNLFlBQVksR0FBcUIsMEJBQWtCLENBQ3ZELFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQ3JCLENBQUM7UUFFRixJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUM1QyxPQUFPLFlBQVksQ0FBQztJQUN0QixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsS0FBSyxDQUFDLGlCQUFpQjtRQUNyQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsS0FBSyxDQUFDLHdCQUF3QixDQUFDLGNBQXNCLElBQUk7UUFDdkQsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNO1lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTTtZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUVyRCxNQUFNLG9CQUFvQixHQUFHLFdBQVcsYUFBWCxXQUFXLGNBQVgsV0FBVyxHQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDO1FBQ3RFLE1BQU0sT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQzdDLElBQUksQ0FBQyxPQUFPO1lBQUUsT0FBTyxLQUFLLENBQUM7UUFDM0IsT0FBTyxPQUFPLENBQUMsV0FBVyxLQUFLLG9CQUFvQixDQUFDO0lBQ3RELENBQUM7SUFFRDs7O09BR0c7SUFDSCxLQUFLLENBQUMsV0FBVyxDQUFDLFFBQTBCO1FBQzFDLElBQUksQ0FBQyxRQUFRO1lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBRXBELElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksSUFBSSxDQUFDLE9BQU87WUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDN0QsSUFBSSxJQUFJLENBQUMsT0FBTztZQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILEtBQUssQ0FBQyxXQUFXO1FBQ2YsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbEQsTUFBTSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDdkIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxLQUFLLENBQUMsZ0JBQWdCO1FBQ3BCLElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDdkQsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxLQUFLLENBQUMsV0FBVztRQUNmLElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ2xELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILEtBQUssQ0FBQyxTQUFTO1FBQ2IsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNO1lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUTtZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUUxRCxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsTUFBTSxZQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3JFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsS0FBSyxDQUFDLElBQUk7UUFDUixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDOUIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxLQUFLLENBQUMsTUFBTSxDQUFDLFNBQWlCO1FBQzVCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxvQkFBb0I7O1FBQ3hCLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTTtZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU07WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDLENBQUEsTUFBQSxJQUFJLENBQUMsUUFBUSwwQ0FBRSxTQUFTLENBQUE7WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFDdEUsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRO1lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBRXpELE1BQU0sSUFBSSxtQkFDUixNQUFNLEVBQUUsb0JBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQ2pDLFFBQVEsRUFBRSxvQkFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFDbkMsU0FBUyxFQUFFLG9CQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFDaEQsUUFBUSxFQUFFLG9CQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsSUFDL0MsQ0FBQyxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxDQUNqRCxDQUFDO1FBQ0YsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsS0FBSyxDQUFDLG1CQUFtQjs7UUFDdkIsSUFBSSxDQUFDLENBQUEsTUFBQSxJQUFJLENBQUMsT0FBTywwQ0FBRSxXQUFXLENBQUE7WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUM7UUFFekUsTUFBTSxJQUFJLEdBQUcsTUFBTSxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztRQUMvQyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzlDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsb0JBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxxQkFBcUI7UUFDcEUsT0FBTyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUVEOzs7T0FHRztJQUNILGVBQWUsQ0FBQyxPQUFxQjs7UUFDbkMsSUFBSSxDQUFDLE9BQU87WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7UUFFeEQsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDdkIsSUFBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzNDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBQSxPQUFPLENBQUMsTUFBTSxtQ0FBSSxPQUFPLENBQUMsUUFBUSxDQUFDO1FBQ2pELElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILHdCQUF3QixDQUFDLEdBQUcsR0FBRyxJQUFJO1FBQ2pDLE1BQU0sSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUMvQixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pDLE1BQU0sSUFBSSxHQUFpQixJQUFJLENBQUMsS0FBSyxDQUFDLG9CQUFZLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUVoRSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEdBQUc7WUFDakMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLG9CQUFZLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDdEMsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDNUIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBRXJCLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0IsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxLQUFLLENBQUMsa0JBQWtCLENBQUMsU0FBaUI7O1FBQ3hDLElBQUksQ0FBQyxTQUFTO1lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBRXRELE1BQU0sUUFBUSxHQUNaLE1BQUEsb0JBQVUsQ0FBQyxNQUFBLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxtQ0FBSSxxQkFBcUIsQ0FBQyxtQ0FBSSxJQUFJLENBQUM7UUFDckUsSUFBSSxDQUFDLFFBQVE7WUFDWCxNQUFNLElBQUksS0FBSyxDQUNiLHlEQUF5RCxDQUMxRCxDQUFDO1FBQ0osSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBRTFDLE1BQU0sV0FBVyxHQUFHLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN6RCxNQUFNLFNBQVMsR0FBRyxNQUFNLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNuRSxJQUFJLENBQUMsU0FBUztZQUFFLE9BQU8sS0FBSyxDQUFDO1FBRTdCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDekMsQ0FBQztDQUNGO0FBaldELHdDQWlXQztBQUVZLFFBQUEsVUFBVSxHQUFHLG9CQUFVLENBQUMifQ==