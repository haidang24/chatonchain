"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.saveIdentity = exports.getIdentity = void 0;
const utils_1 = require("../../utils");
const identityKeyPrefix = 'handshake:login:identity_';
const ivKeyPrefix = 'handshake:login:iv_';
async function getIdentity(domain, password) {
    if (!domain)
        throw new Error('Domain not set.');
    const encryptedIdentity = window.localStorage.getItem(`${identityKeyPrefix}${utils_1.encodeBase64(domain)}`);
    if (!encryptedIdentity)
        return null;
    const iv = utils_1.stringToArrayBuffer(window.localStorage.getItem(`${ivKeyPrefix}${utils_1.encodeBase64(domain)}`));
    try {
        const identity = await decrypt(utils_1.stringToArrayBuffer(utils_1.decodeBase64(encryptedIdentity)), await getPrivateKey(password), iv);
        return JSON.parse(utils_1.arrayBufferToString(identity));
    }
    catch (error) {
        throw new Error('Invalid password.');
    }
}
exports.getIdentity = getIdentity;
async function saveIdentity(identity, password) {
    if (!identity)
        throw new Error('Identity not set.');
    const iv = utils_1.Crypto.getRandomValues(new Uint8Array(12));
    window.localStorage.setItem(`${ivKeyPrefix}${utils_1.encodeBase64(identity.name)}`, utils_1.arrayBufferToString(iv));
    const encryptedIdentity = await encrypt(utils_1.stringToArrayBuffer(JSON.stringify(identity)), await getPrivateKey(password), iv);
    window.localStorage.setItem(`${identityKeyPrefix}${utils_1.encodeBase64(identity.name)}`, utils_1.encodeBase64(utils_1.arrayBufferToString(encryptedIdentity)));
}
exports.saveIdentity = saveIdentity;
async function getPrivateKey(password) {
    const k = (await utils_1.hash(await utils_1.hash(password))).slice(0, 22);
    const privateKey = await utils_1.SubtleCrypto.importKey('jwk', {
        key_ops: ['encrypt', 'decrypt'],
        ext: true,
        kty: 'oct',
        k: k,
        alg: 'A128GCM',
    }, {
        name: 'AES-GCM',
    }, false, ['encrypt', 'decrypt']);
    return privateKey;
}
async function encrypt(data, privateKey, iv) {
    if (!data)
        throw new Error('Data to encrypt not set.');
    if (!privateKey)
        throw new Error('Private Key not set.');
    if (!iv)
        throw new Error('IV not set.');
    const encryptedData = await utils_1.SubtleCrypto.encrypt({
        name: 'AES-GCM',
        iv: iv,
    }, privateKey, data);
    return encryptedData;
}
async function decrypt(data, privateKey, iv) {
    if (!data)
        throw new Error('Data to decrypt not set.');
    if (!privateKey)
        throw new Error('Private Key not set.');
    if (!iv)
        throw new Error('IV not set.');
    const decryptedData = await utils_1.SubtleCrypto.decrypt({
        name: 'AES-GCM',
        iv: iv,
    }, privateKey, data);
    return decryptedData;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL3N0cmF0ZWdpZXMvbG9jYWxTdG9yYWdlL3N0b3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHVDQVFxQjtBQUVyQixNQUFNLGlCQUFpQixHQUFHLDJCQUEyQixDQUFDO0FBQ3RELE1BQU0sV0FBVyxHQUFHLHFCQUFxQixDQUFDO0FBRW5DLEtBQUssVUFBVSxXQUFXLENBQy9CLE1BQWMsRUFDZCxRQUFpQjtJQUVqQixJQUFJLENBQUMsTUFBTTtRQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUVoRCxNQUFNLGlCQUFpQixHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUNuRCxHQUFHLGlCQUFpQixHQUFHLG9CQUFZLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FDOUMsQ0FBQztJQUNGLElBQUksQ0FBQyxpQkFBaUI7UUFBRSxPQUFPLElBQUksQ0FBQztJQUVwQyxNQUFNLEVBQUUsR0FBRywyQkFBbUIsQ0FDNUIsTUFBTSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsR0FBRyxXQUFXLEdBQUcsb0JBQVksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQ3JFLENBQUM7SUFDRixJQUFJO1FBQ0YsTUFBTSxRQUFRLEdBQUcsTUFBTSxPQUFPLENBQzVCLDJCQUFtQixDQUFDLG9CQUFZLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxFQUNwRCxNQUFNLGFBQWEsQ0FBQyxRQUFRLENBQUMsRUFDN0IsRUFBRSxDQUNILENBQUM7UUFDRixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsMkJBQW1CLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztLQUNsRDtJQUFDLE9BQU8sS0FBSyxFQUFFO1FBQ2QsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0tBQ3RDO0FBQ0gsQ0FBQztBQXhCRCxrQ0F3QkM7QUFF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