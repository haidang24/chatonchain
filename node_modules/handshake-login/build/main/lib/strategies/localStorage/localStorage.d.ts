import { AbstractStrategy } from '../abstract';
/**
 * Local Storage Strategy
 */
export declare class LocalStorageStrategy extends AbstractStrategy {
    readonly strategyName = "LocalStorageStrategy";
    storageKey: string;
    reqData: RequestData;
    resData: ResponseData;
    domain: string;
    deviceRecord: DeviceRecordData;
    identity: Identity;
    strategyOptions: Record<string, unknown>;
    constructor();
    /**
     * Reset all properties
     */
    reset(): void;
    /**
     * Set Request Data
     * @param reqData Request data to set
     */
    setRequestData(reqData: RequestData): void;
    /**
     * Set Device Record
     * @param deviceRecord Device record to set
     */
    setDeviceRecord(deviceRecord: DeviceRecordData): void;
    /**
     * Set Response Data
     * @param resData Response data to set
     */
    setResponseData(resData: ResponseData): void;
    /**
     * Get Device ID
     * and generate if it doesn't exist
     * @returns device id
     */
    getDeviceId(): Promise<string>;
    /**
     * Generate and store new Device ID
     * @returns new device id
     * @private
     */
    _generateNewDeviceId(): string;
    /**
     * Generate new Identity
     * @returns Identity
     */
    generateIdentity(): Promise<Identity>;
    /**
     * Get an Identity
     * @returns Identity
     */
    getIdentity(): Promise<Identity>;
    /**
     * Sign challenge
     * @returns signed data
     */
    sign(): Promise<string>;
    /**
     * Verify signature
     * @param challenge challenge to verify signature with
     * @returns boolean if signature verified
     */
    verify(challenge: string): Promise<boolean>;
    /**
     * Generate DNS Record for Identity
     * @param prefix derived from domain and device id
     * @returns DNSRecord
     */
    generateDnsRecord(prefix: string): Promise<DNSRecord>;
    /**
     * Generate Signature Data
     * @returns partial response data
     */
    generateSignatureData(): Promise<Record<string, string>>;
    /**
     * Get Fingerprint from Response Data's Public Key
     * @returns fingerprint
     */
    getFingerprint(): Promise<string>;
}
