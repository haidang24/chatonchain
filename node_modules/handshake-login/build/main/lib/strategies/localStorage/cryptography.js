"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifySignature = exports.sign = exports.importCryptoPrivateKey = exports.importCryptoKey = exports.generateKeyPair = void 0;
const utils_1 = require("../../utils");
async function generateKeyPair() {
    return utils_1.SubtleCrypto.generateKey({
        name: 'RSA-PSS',
        modulusLength: 4096,
        publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
        hash: 'SHA-512',
    }, true, ['sign', 'verify']);
}
exports.generateKeyPair = generateKeyPair;
function importCryptoKey(pem) {
    const binaryDer = utils_1.keyStringToArrayBuffer(pem);
    return utils_1.SubtleCrypto.importKey('spki', binaryDer, {
        name: 'RSA-PSS',
        hash: 'SHA-512',
    }, true, ['verify']);
}
exports.importCryptoKey = importCryptoKey;
function importCryptoPrivateKey(pem) {
    const binaryDer = utils_1.keyStringToArrayBuffer(pem);
    return utils_1.SubtleCrypto.importKey('pkcs8', binaryDer, {
        name: 'RSA-PSS',
        hash: 'SHA-512',
    }, true, ['sign']);
}
exports.importCryptoPrivateKey = importCryptoPrivateKey;
async function sign(privateKey, data) {
    const signature = await utils_1.SubtleCrypto.sign({
        name: 'RSA-PSS',
        saltLength: 64,
    }, privateKey, utils_1.encodeText(data));
    const exportedAsString = utils_1.arrayBufferToString(signature);
    const exportedAsBase64 = utils_1.encodeBase64(exportedAsString);
    return exportedAsBase64;
}
exports.sign = sign;
async function verifySignature(publicKey, signature, data) {
    const binaryDerString = utils_1.decodeBase64(signature);
    const binaryDer = utils_1.stringToArrayBuffer(binaryDerString);
    return await utils_1.SubtleCrypto.verify({
        name: 'RSA-PSS',
        saltLength: 64,
    }, publicKey, binaryDer, utils_1.encodeText(data));
}
exports.verifySignature = verifySignature;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3J5cHRvZ3JhcGh5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9zdHJhdGVnaWVzL2xvY2FsU3RvcmFnZS9jcnlwdG9ncmFwaHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsdUNBUXFCO0FBRWQsS0FBSyxVQUFVLGVBQWU7SUFDbkMsT0FBTyxvQkFBWSxDQUFDLFdBQVcsQ0FDN0I7UUFDRSxJQUFJLEVBQUUsU0FBUztRQUNmLGFBQWEsRUFBRSxJQUFJO1FBQ25CLGNBQWMsRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDbEQsSUFBSSxFQUFFLFNBQVM7S0FDaEIsRUFDRCxJQUFJLEVBQ0osQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQ25CLENBQUM7QUFDSixDQUFDO0FBWEQsMENBV0M7QUFFRCxTQUFnQixlQUFlLENBQUMsR0FBVztJQUN6QyxNQUFNLFNBQVMsR0FBRyw4QkFBc0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM5QyxPQUFPLG9CQUFZLENBQUMsU0FBUyxDQUMzQixNQUFNLEVBQ04sU0FBUyxFQUNUO1FBQ0UsSUFBSSxFQUFFLFNBQVM7UUFDZixJQUFJLEVBQUUsU0FBUztLQUNoQixFQUNELElBQUksRUFDSixDQUFDLFFBQVEsQ0FBQyxDQUNYLENBQUM7QUFDSixDQUFDO0FBWkQsMENBWUM7QUFFRCxTQUFnQixzQkFBc0IsQ0FBQyxHQUFXO0lBQ2hELE1BQU0sU0FBUyxHQUFHLDhCQUFzQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzlDLE9BQU8sb0JBQVksQ0FBQyxTQUFTLENBQzNCLE9BQU8sRUFDUCxTQUFTLEVBQ1Q7UUFDRSxJQUFJLEVBQUUsU0FBUztRQUNmLElBQUksRUFBRSxTQUFTO0tBQ2hCLEVBQ0QsSUFBSSxFQUNKLENBQUMsTUFBTSxDQUFDLENBQ1QsQ0FBQztBQUNKLENBQUM7QUFaRCx3REFZQztBQUVNLEtBQUssVUFBVSxJQUFJLENBQUMsVUFBcUIsRUFBRSxJQUFZO0lBQzVELE1BQU0sU0FBUyxHQUFHLE1BQU0sb0JBQVksQ0FBQyxJQUFJLENBQ3ZDO1FBQ0UsSUFBSSxFQUFFLFNBQVM7UUFDZixVQUFVLEVBQUUsRUFBRTtLQUNmLEVBQ0QsVUFBVSxFQUNWLGtCQUFVLENBQUMsSUFBSSxDQUFDLENBQ2pCLENBQUM7SUFDRixNQUFNLGdCQUFnQixHQUFHLDJCQUFtQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3hELE1BQU0sZ0JBQWdCLEdBQUcsb0JBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3hELE9BQU8sZ0JBQWdCLENBQUM7QUFDMUIsQ0FBQztBQVpELG9CQVlDO0FBRU0sS0FBSyxVQUFVLGVBQWUsQ0FDbkMsU0FBb0IsRUFDcEIsU0FBaUIsRUFDakIsSUFBWTtJQUVaLE1BQU0sZUFBZSxHQUFHLG9CQUFZLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDaEQsTUFBTSxTQUFTLEdBQUcsMkJBQW1CLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDdkQsT0FBTyxNQUFNLG9CQUFZLENBQUMsTUFBTSxDQUM5QjtRQUNFLElBQUksRUFBRSxTQUFTO1FBQ2YsVUFBVSxFQUFFLEVBQUU7S0FDZixFQUNELFNBQVMsRUFDVCxTQUFTLEVBQ1Qsa0JBQVUsQ0FBQyxJQUFJLENBQUMsQ0FDakIsQ0FBQztBQUNKLENBQUM7QUFoQkQsMENBZ0JDIn0=