"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const utils_1 = require("../../utils");
const localStorage_1 = require("./localStorage");
describe('Strategy - Local Storage', function () {
    const localStorageStrategy = new localStorage_1.LocalStorageStrategy();
    before(function () {
        localStorageStrategy.setRequestData({
            domain: 'example',
            challenge: '7mhD9Lx_i_lEg98S7DYVC19bQswvpK_ywaVBng2uy0U',
            callbackUrl: 'https://localhost/callback',
        });
    });
    it('Creates and Gets Device ID', async function () {
        const deviceId = await localStorageStrategy.getDeviceId();
        chai_1.expect(deviceId).to.be.a.string;
        const deviceIdAgain = await localStorageStrategy.getDeviceId();
        chai_1.expect(deviceIdAgain).to.equal(deviceId);
    });
    it('Generates and saves an Identity', async function () {
        const identity = await localStorageStrategy.generateIdentity();
        chai_1.expect(identity).to.have.all.keys([
            'name',
            'publicKey',
            'privateKey',
            'fingerprint',
        ]);
        const identityAgain = await localStorageStrategy.getIdentity();
        chai_1.expect(identityAgain).to.deep.equal(identity);
        const identityAgain2 = await localStorageStrategy.getIdentity();
        chai_1.expect(identityAgain2).to.deep.equal(identity);
    });
    it('Signs challenge and verifies signature', async function () {
        const signature = await localStorageStrategy.sign();
        chai_1.expect(signature).to.be.a.string;
        // challenge needs to be specified as reqData will not be available on callback
        // (and should not be taken from resData)
        const challenge = localStorageStrategy.reqData.challenge;
        localStorageStrategy.setResponseData({
            domain: 'example',
            deviceId: 'prefix',
            publicKey: localStorageStrategy.identity.publicKey,
            signed: utils_1.decodeBase64(signature),
        });
        const verified = await localStorageStrategy.verify(challenge);
        chai_1.expect(verified).to.be.true;
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWxTdG9yYWdlLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL3N0cmF0ZWdpZXMvbG9jYWxTdG9yYWdlL2xvY2FsU3RvcmFnZS5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQThCO0FBRTlCLHVDQUEyQztBQUUzQyxpREFBc0Q7QUFFdEQsUUFBUSxDQUFDLDBCQUEwQixFQUFFO0lBQ25DLE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxtQ0FBb0IsRUFBRSxDQUFDO0lBRXhELE1BQU0sQ0FBQztRQUNMLG9CQUFvQixDQUFDLGNBQWMsQ0FBQztZQUNsQyxNQUFNLEVBQUUsU0FBUztZQUNqQixTQUFTLEVBQUUsNkNBQTZDO1lBQ3hELFdBQVcsRUFBRSw0QkFBNEI7U0FDMUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsNEJBQTRCLEVBQUUsS0FBSztRQUNwQyxNQUFNLFFBQVEsR0FBRyxNQUFNLG9CQUFvQixDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzFELGFBQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFFaEMsTUFBTSxhQUFhLEdBQUcsTUFBTSxvQkFBb0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUMvRCxhQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMzQyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxpQ0FBaUMsRUFBRSxLQUFLO1FBQ3pDLE1BQU0sUUFBUSxHQUFHLE1BQU0sb0JBQW9CLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUMvRCxhQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO1lBQ2hDLE1BQU07WUFDTixXQUFXO1lBQ1gsWUFBWTtZQUNaLGFBQWE7U0FDZCxDQUFDLENBQUM7UUFFSCxNQUFNLGFBQWEsR0FBRyxNQUFNLG9CQUFvQixDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQy9ELGFBQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUU5QyxNQUFNLGNBQWMsR0FBRyxNQUFNLG9CQUFvQixDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ2hFLGFBQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNqRCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyx3Q0FBd0MsRUFBRSxLQUFLO1FBQ2hELE1BQU0sU0FBUyxHQUFHLE1BQU0sb0JBQW9CLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDcEQsYUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUVqQywrRUFBK0U7UUFDL0UseUNBQXlDO1FBQ3pDLE1BQU0sU0FBUyxHQUFHLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUM7UUFFekQsb0JBQW9CLENBQUMsZUFBZSxDQUFDO1lBQ25DLE1BQU0sRUFBRSxTQUFTO1lBQ2pCLFFBQVEsRUFBRSxRQUFRO1lBQ2xCLFNBQVMsRUFBRSxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsU0FBUztZQUNsRCxNQUFNLEVBQUUsb0JBQVksQ0FBQyxTQUFTLENBQUM7U0FDaEMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxRQUFRLEdBQUcsTUFBTSxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDOUQsYUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDO0lBQzlCLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMifQ==