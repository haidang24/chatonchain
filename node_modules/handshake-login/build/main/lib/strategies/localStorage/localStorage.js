"use strict";
// https://github.com/namebasehq/handshake-id-manager/blob/master/src/services/DeviceService/index.ts
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalStorageStrategy = void 0;
const utils_1 = require("../../utils");
const abstract_1 = require("../abstract");
const cryptography = __importStar(require("./cryptography"));
const store = __importStar(require("./store"));
/**
 * Local Storage Strategy
 */
class LocalStorageStrategy extends abstract_1.AbstractStrategy {
    constructor() {
        super();
        this.strategyName = 'LocalStorageStrategy';
        this.storageKey = 'handshake:login:deviceId';
    }
    /**
     * Reset all properties
     */
    reset() {
        this.domain = null;
        this.identity = null;
        this.reqData = null;
        this.resData = null;
        this.deviceRecord = null;
    }
    /**
     * Set Request Data
     * @param reqData Request data to set
     */
    setRequestData(reqData) {
        this.reset();
        this.reqData = reqData;
        this.domain = reqData.domain.toLowerCase();
    }
    /**
     * Set Device Record
     * @param deviceRecord Device record to set
     */
    setDeviceRecord(deviceRecord) {
        this.deviceRecord = deviceRecord;
    }
    /**
     * Set Response Data
     * @param resData Response data to set
     */
    setResponseData(resData) {
        this.resData = resData;
        this.domain = resData.domain;
    }
    /**
     * Get Device ID
     * and generate if it doesn't exist
     * @returns device id
     */
    async getDeviceId() {
        var _a;
        return ((_a = window.localStorage.getItem(this.storageKey)) !== null && _a !== void 0 ? _a : this._generateNewDeviceId());
    }
    /**
     * Generate and store new Device ID
     * @returns new device id
     * @private
     */
    _generateNewDeviceId() {
        const uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            const r = (Math.random() * 16) | 0, v = c == 'x' ? r : (r & 0x3) | 0x8;
            return v.toString(16);
        });
        window.localStorage.setItem(this.storageKey, uuid);
        return uuid;
    }
    /**
     * Generate new Identity
     * @returns Identity
     */
    async generateIdentity() {
        var _a;
        if (!this.domain)
            throw new Error('Domain not set.');
        const { privateKey, publicKey } = await cryptography.generateKeyPair();
        const publicKeyString = await utils_1.exportCryptoKey(publicKey);
        const identity = {
            name: this.domain,
            publicKey: publicKeyString,
            privateKey: await utils_1.exportPrivateCryptoKey(privateKey),
            fingerprint: await utils_1.hash(publicKeyString),
        };
        await store.saveIdentity(identity, (_a = this.strategyOptions) === null || _a === void 0 ? void 0 : _a.password);
        this.identity = identity;
        return identity;
    }
    /**
     * Get an Identity
     * @returns Identity
     */
    async getIdentity() {
        var _a;
        if (!this.domain)
            throw new Error('Domain not set.');
        this.identity = await store.getIdentity(this.domain, (_a = this.strategyOptions) === null || _a === void 0 ? void 0 : _a.password);
        return this.identity;
    }
    /**
     * Sign challenge
     * @returns signed data
     */
    async sign() {
        var _a, _b;
        if (!this.domain)
            throw new Error('Domain not set.');
        if (!((_a = this.reqData) === null || _a === void 0 ? void 0 : _a.challenge))
            throw new Error('Challenge not set.');
        if (!((_b = this.identity) === null || _b === void 0 ? void 0 : _b.privateKey))
            throw new Error('Private Key not set.');
        let privateKey;
        try {
            privateKey = await cryptography.importCryptoPrivateKey(this.identity.privateKey);
        }
        catch (error) {
            console.error(error);
            throw new Error('Could not import invalid private key.');
        }
        const signature = await cryptography.sign(privateKey, this.reqData.challenge);
        return utils_1.encodeBase64(signature);
    }
    /**
     * Verify signature
     * @param challenge challenge to verify signature with
     * @returns boolean if signature verified
     */
    async verify(challenge) {
        var _a, _b;
        if (!challenge)
            throw new Error('Challenge not set.');
        if (!this.domain)
            throw new Error('Domain not set.');
        if (!((_a = this.resData) === null || _a === void 0 ? void 0 : _a.publicKey))
            throw new Error('Public Key not set.');
        if (!((_b = this.resData) === null || _b === void 0 ? void 0 : _b.signed))
            throw new Error('Signature not set.');
        let publicKey;
        try {
            publicKey = await cryptography.importCryptoKey(this.resData.publicKey);
        }
        catch (error) {
            console.error(error);
            throw new Error('Could not import invalid public key.');
        }
        const signatureVerified = await cryptography.verifySignature(publicKey, this.resData.signed, challenge);
        return signatureVerified;
    }
    /**
     * Generate DNS Record for Identity
     * @param prefix derived from domain and device id
     * @returns DNSRecord
     */
    async generateDnsRecord(prefix) {
        var _a;
        if (!prefix)
            throw new Error('Prefix not set.');
        if (!this.domain)
            throw new Error('Domain not set.');
        if (!((_a = this.identity) === null || _a === void 0 ? void 0 : _a.fingerprint))
            throw new Error('Fingerprint not set.');
        return {
            type: 'TXT',
            name: `${prefix}._auth.${this.domain}.`,
            value: `v=0;fingerprint=${this.identity.fingerprint}`,
        };
    }
    /**
     * Generate Signature Data
     * @returns partial response data
     */
    async generateSignatureData() {
        return {
            signed: await this.sign(), // Buffer => b64 => b64 (https://github.com/namebasehq/handshake-id-manager/issues/6)
        };
    }
    /**
     * Get Fingerprint from Response Data's Public Key
     * @returns fingerprint
     */
    async getFingerprint() {
        var _a;
        if (!((_a = this.resData) === null || _a === void 0 ? void 0 : _a.publicKey))
            throw new Error('Public Key not set.');
        let pubKey;
        try {
            pubKey = await cryptography.importCryptoKey(this.resData.publicKey);
        }
        catch (error) {
            console.error(error);
            throw new Error('Could not import invalid public key.');
        }
        return utils_1.calculateFingerprint(pubKey);
    }
}
exports.LocalStorageStrategy = LocalStorageStrategy;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWxTdG9yYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9zdHJhdGVnaWVzL2xvY2FsU3RvcmFnZS9sb2NhbFN0b3JhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHFHQUFxRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVyRyx1Q0FNcUI7QUFDckIsMENBQStDO0FBRS9DLDZEQUErQztBQUMvQywrQ0FBaUM7QUFFakM7O0dBRUc7QUFDSCxNQUFhLG9CQUFxQixTQUFRLDJCQUFnQjtJQVV4RDtRQUNFLEtBQUssRUFBRSxDQUFDO1FBVkQsaUJBQVksR0FBRyxzQkFBc0IsQ0FBQztRQVc3QyxJQUFJLENBQUMsVUFBVSxHQUFHLDBCQUEwQixDQUFDO0lBQy9DLENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUs7UUFDSCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztRQUNuQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUNyQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUNwQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUNwQixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztJQUMzQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsY0FBYyxDQUFDLE9BQW9CO1FBQ2pDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUM3QyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsZUFBZSxDQUFDLFlBQThCO1FBQzVDLElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO0lBQ25DLENBQUM7SUFFRDs7O09BR0c7SUFDSCxlQUFlLENBQUMsT0FBcUI7UUFDbkMsSUFBSSxDQUFDLE9BQU8s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