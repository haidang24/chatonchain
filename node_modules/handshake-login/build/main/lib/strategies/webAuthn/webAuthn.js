"use strict";
/* eslint-disable @typescript-eslint/ban-ts-comment */
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebAuthnStrategy = void 0;
const utils_1 = require("../../utils");
const abstract_1 = require("../abstract");
const cryptography_1 = require("./cryptography");
/**
 * WebAuthn Strategy
 */
class WebAuthnStrategy extends abstract_1.AbstractStrategy {
    constructor() {
        super();
        this.strategyName = 'WebAuthnStrategy';
    }
    /**
     * Reset all properties
     */
    reset() {
        this.domain = null;
        this.identity = null;
        this.signature = null;
        this.clientDataJSON = null;
        this.authenticatorData = null;
        this.reqData = null;
        this.resData = null;
        this.deviceRecord = null;
    }
    /**
     * Set Request Data
     * @param reqData Request data to set
     */
    setRequestData(reqData) {
        this.reset();
        this.reqData = reqData;
        this.domain = reqData.domain.toLowerCase();
    }
    /**
     * Set Device Record
     * @param deviceRecord Device record to set
     */
    setDeviceRecord(deviceRecord) {
        this.deviceRecord = deviceRecord;
    }
    /**
     * Set Response Data
     * @param resData Response data to set
     */
    setResponseData(resData) {
        this.resData = resData;
        this.domain = resData.domain;
    }
    /**
     * Get Device ID
     * @returns device id
     */
    async getDeviceId() {
        return window.location.hostname;
    }
    /**
     * Create Challenge from Request Data
     * @returns challenge as Uint8Array
     */
    _createChallenge() {
        if (!this.reqData.challenge)
            throw new Error('Challenge not set.');
        const challenge = utils_1.stringToArrayBuffer(this.reqData.challenge);
        return new Uint8Array(challenge);
    }
    /**
     * Generate new Identity
     * @returns Identity
     */
    async generateIdentity() {
        if (!this.domain)
            throw new Error('Domain not set.');
        const challenge = this._createChallenge();
        const credential = await navigator.credentials.create({
            publicKey: {
                challenge: new Uint8Array(challenge),
                rp: { name: 'Handshake Login', id: window.location.hostname },
                user: {
                    id: new Uint8Array([79]),
                    name: this.domain,
                    displayName: this.domain,
                },
                pubKeyCredParams: [
                    { type: 'public-key', alg: -7 },
                    { type: 'public-key', alg: -257 },
                ],
                timeout: 60000,
                attestation: 'direct',
            },
        });
        // @ts-ignore
        const publicKeyAb = credential.response.getPublicKey();
        const publicKey = await utils_1.SubtleCrypto.importKey('spki', publicKeyAb, {
            name: 'ECDH',
            namedCurve: 'P-256',
        }, true, []);
        const publicKeyPem = await utils_1.exportCryptoKey(publicKey);
        const identity = {
            name: this.domain,
            // @ts-ignore
            keyId: utils_1.encodeBase64(utils_1.arrayBufferToString(credential.rawId)).replace(/=+$/, ''),
            publicKey: publicKeyPem,
            fingerprint: await utils_1.hash(publicKeyPem),
        };
        this.identity = identity;
        return identity;
    }
    /**
     * Get an Identity
     * @param domain domain name
     * @returns Identity object
     */
    async getIdentity() {
        var _a;
        if (!this.domain)
            throw new Error('Domain not set.');
        if (!this.deviceRecord)
            return null;
        if (!((_a = this.deviceRecord) === null || _a === void 0 ? void 0 : _a.keyId))
            throw new Error('Key ID not set.');
        const challenge = this._createChallenge();
        const credential = await navigator.credentials.get({
            publicKey: {
                challenge: challenge,
                rpId: window.location.hostname,
                allowCredentials: [
                    {
                        type: 'public-key',
                        id: utils_1.stringToArrayBuffer(utils_1.decodeBase64(this.deviceRecord.keyId)),
                    },
                ],
                userVerification: 'discouraged',
            },
        });
        let publicKey;
        try {
            publicKey = await utils_1.SubtleCrypto.importKey('spki', utils_1.stringToArrayBuffer(utils_1.decodeBase64(this.deviceRecord.pubKey)), {
                name: 'ECDH',
                namedCurve: 'P-256',
            }, true, []);
        }
        catch (error) {
            console.error(error);
            throw new Error('Could not import invalid public key.');
        }
        const publicKeyPem = await utils_1.exportCryptoKey(publicKey);
        const identity = {
            name: this.domain,
            keyId: this.deviceRecord.keyId,
            publicKey: publicKeyPem,
            fingerprint: await utils_1.hash(publicKeyPem),
        };
        this.identity = identity;
        // @ts-ignore
        this.signature = credential.response.signature;
        // @ts-ignore
        this.authenticatorData = credential.response.authenticatorData;
        // @ts-ignore
        this.clientDataJSON = credential.response.clientDataJSON;
        return identity;
    }
    /**
     * Sign challenge
     * @returns signed data
     */
    async sign() {
        if (!this.domain)
            throw new Error('Domain not set.');
        if (!this.reqData.challenge)
            throw new Error('Challenge not set.');
        return utils_1.encodeBase64(this.signature);
    }
    /**
     * Verify signature
     * @param challenge challenge to verify signature with
     * @returns boolean if signature verified
     */
    async verify(challenge) {
        if (!challenge)
            throw new Error('Challenge not set.');
        if (!this.domain)
            throw new Error('Domain not set.');
        if (!this.resData)
            throw new Error('Response Data not set.');
        const clientDataJSON = utils_1.stringToArrayBuffer(this.resData.clientDataJSON);
        const authenticatorData = utils_1.stringToArrayBuffer(this.resData.authenticatorData);
        const clientData = JSON.parse(this.resData.clientDataJSON);
        if (utils_1.encodeBase64(challenge).replace(/=+$/, '') !== clientData.challenge) {
            return false;
        }
        const clientDataJSONHash = await utils_1.SubtleCrypto.digest('SHA-256', clientDataJSON);
        const verifiableData = new Uint8Array(authenticatorData.byteLength + clientDataJSONHash.byteLength);
        verifiableData.set(new Uint8Array(authenticatorData), 0);
        verifiableData.set(new Uint8Array(clientDataJSONHash), authenticatorData.byteLength);
        const publicKeyObj = await cryptography_1.importCryptoKey(this.resData.publicKey);
        const signatureVerified = await cryptography_1.verifySignature(publicKeyObj, utils_1.stringToArrayBuffer(this.resData.signed), verifiableData);
        return signatureVerified;
    }
    /**
     * Generate DNS Record for Identity
     * @param prefix derived from domain and device id
     * @returns DNSRecord
     */
    async generateDnsRecord(prefix) {
        var _a, _b, _c;
        if (!prefix)
            throw new Error('Prefix not set.');
        if (!this.domain)
            throw new Error('Domain not set.');
        if (!((_a = this.identity) === null || _a === void 0 ? void 0 : _a.publicKey))
            throw new Error('Public Key not set.');
        if (!((_b = this.identity) === null || _b === void 0 ? void 0 : _b.fingerprint))
            throw new Error('Fingerprint not set.');
        if (!((_c = this.identity) === null || _c === void 0 ? void 0 : _c.keyId))
            throw new Error('Key ID not set.');
        const cleanPublicKey = this.identity.publicKey
            .replace(/\n?-{5}\n?[\w\s]+\n?-{5}\n?/g, '')
            .replace(/=+$/g, '');
        return {
            type: 'TXT',
            name: `${prefix}._auth.${this.domain}.`,
            value: `v=0;fingerprint=${this.identity.fingerprint};keyId=${this.identity.keyId};pubKey=${cleanPublicKey}`,
        };
    }
    /**
     * Generate Signature Data
     * @returns partial response data
     */
    async generateSignatureData() {
        if (!this.signature)
            throw new Error('Signature not set.');
        if (!this.clientDataJSON)
            throw new Error('ClientDataJSON not set.');
        if (!this.authenticatorData)
            throw new Error('AuthenticatorData not set.');
        return {
            signed: utils_1.encodeBase64(utils_1.arrayBufferToString(this.signature)),
            clientDataJSON: utils_1.encodeBase64(utils_1.arrayBufferToString(this.clientDataJSON)),
            authenticatorData: utils_1.encodeBase64(utils_1.arrayBufferToString(this.authenticatorData)),
        };
    }
    /**
     * Get Fingerprint from Response Data's Public Key
     * @returns fingerprint
     */
    async getFingerprint() {
        var _a;
        if (!((_a = this.resData) === null || _a === void 0 ? void 0 : _a.publicKey))
            throw new Error('Public Key not set.');
        let pubKey;
        try {
            pubKey = await cryptography_1.importCryptoKey(this.resData.publicKey);
        }
        catch (error) {
            console.error(error);
            throw new Error('Could not import invalid public key.');
        }
        return utils_1.calculateFingerprint(pubKey);
    }
}
exports.WebAuthnStrategy = WebAuthnStrategy;
//# sourceMappingURL=data:application/json;base64,